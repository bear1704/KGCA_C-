_msize(pointer) => 동적 할당한 메모리 크기(배열 크기) 리턴  ;: 동적할당이 아니면 오류 발생!
  (표준은 아님)
_countof(array) => 정적 배열 크기 리턴 

백준 1문제(분할정복?그리드?, 재귀?)

셰이더 마무리, 깊이 버퍼 그림자매핑 게시준비

전방선언
싱글턴

연결리스트 제작 시, head를 실 값이 없는 가상의 노드로 만들어 놓고, head->next부터 시작한다면 
매번 노드 추가시마다 if(head!=NULL)체크를 할 필요가 없다. 
head = tail로 해 놓고, 무조건 추가시마다 tail->next로 추가할 수 있기 때문.
대신, 순회 시 실값이 없는 첫 번째 부분(head)는 포함하지 말아야 한다. 
(head->next부터 실제 노드가 시작하기 때문에..)

객체를 대입하게 되면 복사생성자가 호출됨.
복사생성자가 없다면, string 등 딥카피가 필요한 변수들이 섈로카피로 들어가기 때문에 문제가 생김. 

초기화 리스트
const(상수)가 멤버에 있거나, 멤버변수가 참조자로 되어있거나(생성시 실체 바로 필요), 객체가 객체에 포함되어 있어 그 객체를 초기화 해야 하거나, 상속 받은 멤버 변수를 초기화 할 때 쓰임 

child(i,j) : Parent(i,j)

const int* const ptr;

앞 const는 역참조 방지
뒤 const는 ptr 주소변경 방지

int func() const;

함수 뒤에 const가 붙는다 == 내부에서 클래스의 멤버변수를 바꿀 수 없다
내부에서 함수를 호출할 수도 없다(const 함수끼리만 호출이 가능하다) 

static 변수는 TLinkedList::m_icount 식으로 접근해야함(객체 간 공유되고, 소유물이 아님)

static 멤버변수는 static 함수로 접근하여 리턴하여야 한다.

private:
static int m_iCount;

static int Size() { return m_iCount;}
int Size() { return TLinkedList::m_iCount; } => 불가능


int StudentData::aaa = 0; (초기화)


public:
TLinkedList(const TLinkedList& list);   : 복사생성자의 원본

복사생성자가 따로 정의되지 않았다면 =로 객체 카피를 하면 기본 복사 생성자가 적용됨.
일반 자료형은 따로 복사가 되지만 포인터형은 포인터를 공유할 뿐임.(서로 같은 주소값을 가리키게 됨)
그래서 복사생성자를 따로 정의해 주어야 하며, 복사생성자에서 복사 방법을 제시하지 않으면(예를들어 빈칸)
아무런 복사가 일어나지 않음.



